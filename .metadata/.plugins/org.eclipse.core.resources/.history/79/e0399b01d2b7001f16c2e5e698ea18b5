package com.example.demo.collection;

import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.client.RestTemplate;

import com.example.demo.collection.service.CollectionBatchService;

public class CollectionBatchServiceTest {
	
	 @Mock
	    private CollectionBatchService collectionBatchService;

	    @Mock
	    private CollectionRepository collectionRepository;

	    @InjectMocks
	    private CollectionBatchController collectionBatchController;

	    private MockMvc mockMvc;

	    public CollectionBatchTest() {
	        MockitoAnnotations.openMocks(this);
	        this.mockMvc = MockMvcBuilders.standaloneSetup(collectionBatchController).build();
	    }

	    // 1.呼叫api取得資料
	    @Test
	    public void testGetExchangeData_BatchProcessing() {
	        // 模擬 API 返回的 JSON
	        String mockApiResponse = "[\n" +
	                "  { \"Date\": \"20241209\", \"USD/NTD\": \"30.1234\" },\n" +
	                "  { \"Date\": \"20241210\", \"USD/NTD\": \"30.5678\" }\n" +
	                "]";

	        // 模擬 RestTemplate 行為
	        when(collectionBatchService.getExchangeData()).then(invocation -> {
	            when(collectionRepository.save(any(Collection.class))).thenReturn(null);
	            return null;
	        });

	        // 執行 Controller 的 GET 請求
	        mockMvc.perform(get("/api/getExchangeData"))
	                .andExpect(status().isOk())
	                .andExpect(content().string("Batch process executed!"));

	        // 驗證 Repository 被調用兩次
	        verify(collectionRepository, times(2)).save(argThat(collection -> {
	            LocalDateTime exchangeDate = collection.getExchangeDate();
	            return (exchangeDate.equals(LocalDateTime.of(2024, 12, 9, 18, 0)) &&
	                    collection.getUsdToNtd() == 30.1234) ||
	                   (exchangeDate.equals(LocalDateTime.of(2024, 12, 10, 18, 0)) &&
	                    collection.getUsdToNtd() == 30.5678);
	        }));
	    }

	    // 2. 成功
	    @Test
	    public void testGetHistoricalExchange_Success() throws Exception {
	        // 模擬 Service 返回的數據
	        when(collectionBatchService.getHistoricalExchange(
	                LocalDate.of(2024, 1, 1),
	                LocalDate.of(2024, 1, 1),
	                "usd"
	        )).thenReturn(Arrays.asList(
	                new ExchangeResponse("20240103", "31.01"),
	                new ExchangeResponse("20240104", "31.016")
	        ));

	        // 執行 POST 請求並驗證
	        mockMvc.perform(post("/api/getHistoryExchange")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{\"startDate\": \"2024-01-01\", \"endDate\": \"2024-01-01\", \"currency\": \"usd\"}"))
	                .andExpect(status().isOk())
	                .andExpect(jsonPath("$.error.code").value("0000"))
	                .andExpect(jsonPath("$.error.message").value("成功"))
	                .andExpect(jsonPath("$.currency[0].date").value("20240103"))
	                .andExpect(jsonPath("$.currency[0].usd").value("31.01"))
	                .andExpect(jsonPath("$.currency[1].date").value("20240104"))
	                .andExpect(jsonPath("$.currency[1].usd").value("31.016"));
	    }

	    // 2. 日期範圍錯誤
	    @Test
	    public void testGetHistoricalExchange_InvalidDateRange() throws Exception {
	        // 模擬日期範圍錯誤
	        when(collectionBatchService.getHistoricalExchange(any(), any(), any()))
	                .thenThrow(new IllegalArgumentException("日期區間不符"));

	        // 發送 POST 請求並驗證
	        mockMvc.perform(post("/api/getHistoryExchange")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{\"startDate\": \"2022-01-01\", \"endDate\": \"2024-12-01\", \"currency\": \"usd\"}"))
	                .andExpect(status().isBadRequest())
	                .andExpect(jsonPath("$.error.code").value("E001"))
	                .andExpect(jsonPath("$.error.message").value("日期區間不符"))
	                .andExpect(jsonPath("$.currency").doesNotExist());
	    }

	    // 2. 幣別錯誤
	    @Test
	    public void testGetHistoricalExchange_InvalidCurrency() throws Exception {
	        // 模擬幣別錯誤
	        when(collectionBatchService.getHistoricalExchange(any(), any(), any()))
	                .thenThrow(new IllegalArgumentException("一次僅能查一種幣別"));

	        // 發送 POST 請求並驗證
	        mockMvc.perform(post("/api/getHistoryExchange")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{\"startDate\": \"2024-01-01\", \"endDate\": \"2024-01-01\", \"currency\": \"eur\"}"))
	                .andExpect(status().isBadRequest())
	                .andExpect(jsonPath("$.error.code").value("E001"))
	                .andExpect(jsonPath("$.error.message").value("一次僅能查一種幣別"))
	                .andExpect(jsonPath("$.currency").doesNotExist());
	    }
}
