package com.example.demo.collection;

import com.example.demo.collection.controller.CollectionBatchController;
import com.example.demo.collection.service.CollectionBatchService;
import com.example.demo.collection.vo.Collection;
import com.example.demo.collection.vo.ExchangeResponse;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class CollectionBatchServiceTest {

	@Mock
	private CollectionBatchService collectionBatchService;

	@Mock
	private CollectionRepository collectionRepository;

	@InjectMocks
	private CollectionBatchController collectionBatchController;

	private MockMvc mockMvc;

	public void CollectionBatchTest() {
		MockitoAnnotations.openMocks(this);
		this.mockMvc = MockMvcBuilders.standaloneSetup(collectionBatchController).build();
	}

	// 1. 呼叫 API 取得資料
    @Test
    public void testGetExchangeData_BatchProcessing() throws Exception {
        doAnswer(invocation -> {
            Collection collection1 = new Collection();
            collection1.setUsdToNtd(30.1234);
            collection1.setExchangeDate(LocalDateTime.of(2024, 12, 9, 18, 0));

            Collection collection2 = new Collection();
            collection2.setUsdToNtd(30.5678);
            collection2.setExchangeDate(LocalDateTime.of(2024, 12, 10, 18, 0));

            collectionRepository.save(collection1);
            collectionRepository.save(collection2);
            return null;
        }).when(collectionBatchService).getExchangeData();

        mockMvc.perform(get("/api/getExchangeData"))
                .andExpect(status().isOk())
                .andExpect(content().string("Batch process executed!"));

        verify(collectionRepository, times(2)).save(argThat(collection -> {
            LocalDateTime exchangeDate = collection.getExchangeDate();
            return (exchangeDate.equals(LocalDateTime.of(2024, 12, 9, 18, 0)) &&
                    collection.getUsdToNtd().equals(30.1234)) ||
                   (exchangeDate.equals(LocalDateTime.of(2024, 12, 10, 18, 0)) &&
                    collection.getUsdToNtd().equals(30.5678));
        }));
    }
}
